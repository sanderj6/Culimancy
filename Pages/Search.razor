@page "/"
@using GenericInterfaces.Search
@using Common.Models
@using RestSharp.Extensions
@using Culimancy.Common.HttpModels
@using System.Diagnostics
@inject SearchGI SearchGI
@inject IJSRuntime JSRuntime

<h1>Search For A Recipe</h1>
<h4>This website is currently a work in progress.</h4>

<p>Current search: @currentSearch</p>

<EditForm Model="allRecipes" OnSubmit="@SearchRecipes">
    <InputText @bind-Value="@currentSearch"></InputText>

    <button class="btn btn-primary" @onclick="SearchRecipes">GO!</button>
    @*<button class="btn btn-primary" @onclick="ScrapeForRecipes">Custom Scrape</button>*@
    @*<button class="btn btn-primary" @onclick="GetRecipe">Find in Database</button>*@

    <div class="col-lg-12">
        <div class="row" id="grid">
            @foreach (var recipe in allRecipes)
            {
                <div class="grid-item p-3">
                    <Recipe Model="recipe"></Recipe>
                </div>
            }
        </div>
    </div>
</EditForm>

@code {
    private RecipeModel recipeModel = new RecipeModel();
    public List<RecipeModel> allRecipes = new List<RecipeModel>();
    private string currentSearch;
    public bool Loading = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            //await JSRuntime.InvokeVoidAsync("StartIsotope");
        }
        catch (Exception e)
        {
            throw e;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            try
            {

            }
            catch (Exception e)
            {
                throw e;
            }
        }
    }

    private async void SearchRecipes()
    {
        var searchResults = SearchGI.GetRecipes(currentSearch);
        allRecipes.Clear();

        foreach (var result in searchResults)
        {
            allRecipes.Add(new RecipeModel()
            {
                Name = result.label,
                Image = result.image,
                Website = result.shareAs,
                Source = result.source,
                Calories = (int)result.calories,
                Ingredients = result.ingredients.Select(x => x.text).ToList()
            });
        }

        try
        {
            var tasks = new List<Task>();

            foreach (var recipe in allRecipes)
            {
                tasks.Add(Task.Run(() =>
                {
                    var result = SearchGI.AddRecipe(recipe).Result;
                }));
            }

            try
            {
                await Task.WhenAll(tasks.ToArray());
            }
            catch (Exception e)
            {
            }
        }
        catch (Exception e)
        {
            Debug.WriteLine(e,"Issue writing to database");
        }

        await JSRuntime.InvokeVoidAsync("StartIsotope");
        StateHasChanged();
    }
    private async void ScrapeForRecipes()
    {
        var searchResults = SearchGI.GetRecipes(currentSearch,"foodnetwork");
        allRecipes.Clear();

        foreach (var result in searchResults)
        {
            //allRecipes.Add(new RecipeModel()
            //{
            //    Name = result.label,
            //    Image = result.image,
            //    Website = result.shareAs,
            //    Source = result.source,
            //    Calories = result.calories,
            //    Ingredients = result.ingredients.Select(x => x.text).ToList()
            //});
        }

        StateHasChanged();
    }

    private async void GetRecipe()
    {
        var searchResults = await SearchGI.GetRecipeByKeyword(currentSearch);

        StateHasChanged();
    }
}
