@page "/"
@using GenericInterfaces.Search
@using Common.Models
@using RestSharp.Extensions
@using Culimancy.Common.HttpModels
@using System.Diagnostics
@using System.Text.RegularExpressions
@inject SearchGI SearchGI
@inject IJSRuntime JSRuntime


<div style="position: relative; display: flex;">
    <img class="background-image" src="images/pantry2.jpg" />
    <div class="background-text-search">
        <div class="col-8">
            <h1 id="textBackground" style="font-family: wizard">Culimancy</h1>
            <small class="text-muted">v0.18</small>

            <small>This website was written in Blazor, and is currently a work in progress.</small>

            @if (Disclaimer)
            {
                <div id="disclaimer">
                    <small>
                        This search asynchronously pulled recipe and nutritional information from several API's. <br />
                        All recipes and ingredients are then stored in my own database. <br />
                        Common words like chicken, onions, and garlic have their results cached in Redis for immediate access. <br />
                        The end goal is to create a pantry management system that searches only by the grocery items currently in your possession.
                    </small>
                </div>
            }

        </div>
        <div class="col-12 p-3">
            <EditForm Model="allRecipes" OnSubmit="@SearchRecipes">
                <h5>Search for a Recipe</h5>
                <InputText border-radius:25px @bind-Value="@currentSearch"></InputText>
                <button class="btn btn-primary" @onclick="SearchRecipes">GO!</button>
                @*<button class="btn btn-primary" @onclick="ScrapeForRecipes">Custom Scrape</button>*@
                @*<button class="btn btn-primary" @onclick="GetRecipe">Find in Database</button>*@

                <div class="p-3 main-carousel" style="height: 50vh;">
                    @foreach (var recipe in allRecipes)
                    {
                        <Recipe Model="recipe" ToggleCallback="ToggleRecipe" SizeClasses="recipe-price-card" CloseCallback="RemoveRecipe" ToggleEnabled="false" ImageRotator="false"></Recipe>
                    }
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private RecipeModel recipeModel = new RecipeModel();
    public List<RecipeModel> allRecipes = new List<RecipeModel>();
    private string currentSearch;

    public bool Loading = false;
    public bool Disclaimer = false;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
        }
        catch (Exception e)
        {
            throw e;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            try
            {

            }
            catch (Exception e)
            {
                Debug.WriteLine(e.Message);
            }
        }
    }

    private async void SearchRecipes()
    {
        allRecipes.Clear();

        //Show disclaimer
        Disclaimer = true;

        var searchResults = await SearchGI.GetRecipes(currentSearch);

        foreach (var result in searchResults)
        {
            allRecipes.Add(new RecipeModel()
            {
                Name = result.label,
                Image = result.image,
                Website = result.shareAs,
                Source = result.source,
                Calories = (int)result.calories,
                Ingredients = result.ingredients.Select(x => x.text).ToList()
            });
        }

        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("StartFlickity");

        //Add to database
        //try
        //{
        //    var tasks = new List<Task>();

        //    foreach (var recipe in allRecipes)
        //    {
        //        tasks.Add(Task.Run(() =>
        //        {
        //            var result = SearchGI.AddRecipe(recipe).Result;
        //        }));

        //        foreach (var ingredient in recipe.Ingredients)
        //        {
        //            ////Filter unnecessary ingredients
        //            //var ingredientWords = ingredient.Split(" ").ToList();
        //            //var unnecessaryWords = ingredientWords.Where(x => x.Contains("cups"));
        //            //var filteredIngredients = ingredientWords.Except(unnecessaryWords);

        //            //var test = string.Join(" ", Regex.Split(ingredient, @"[\d]"));
        //            ////(?< !^)(?=[A - Z])

        //            tasks.Add(Task.Run(() =>
        //            {
        //                try
        //                {
        //                    var result = SearchGI.AddIngredient(ingredient).Result;
        //                }
        //                catch (Exception e)
        //                {
        //                    Debug.WriteLine(e, "Issue writing to database");
        //                }
        //            }));
        //        }
        //    }

        //    try
        //    {
        //        await Task.WhenAll(tasks.ToArray());
        //    }
        //    catch (Exception e)
        //    {
        //        Debug.WriteLine(e, "Issue writing to database");
        //    }
        //}
        //catch (Exception e)
        //{
        //    Debug.WriteLine(e, "Issue writing to database");
        //}

        StateHasChanged();

        //await JSRuntime.InvokeVoidAsync("UpdateFlickity");
    }

    private async void ScrapeForRecipes()
    {
        var searchResults = SearchGI.GetRecipes(currentSearch, "foodnetwork");
        allRecipes.Clear();

        foreach (var result in searchResults)
        {
            //allRecipes.Add(new RecipeModel()
            //{
            //    Name = result.label,
            //    Image = result.image,
            //    Website = result.shareAs,
            //    Source = result.source,
            //    Calories = result.calories,
            //    Ingredients = result.ingredients.Select(x => x.text).ToList()
            //});
        }

        StateHasChanged();
    }
    private async void GetRecipe()
    {
        var searchResults = await SearchGI.GetRecipeByKeyword(currentSearch);

        StateHasChanged();
    }
    private void RemoveRecipe(RecipeModel _recipe)
    {
        allRecipes.Remove(_recipe);
        StateHasChanged();
    }
    private void ToggleRecipe(RecipeModel _recipe, bool status)
    {

    }
}
